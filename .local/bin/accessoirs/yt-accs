#!/bin/bash

set -e

set_yt_resolution() {
	PS3="Enter a number: "

	if [[ -z $resoultion ]]; then
		select resolution in best 144 240 360 480 720 1080 2160 abort
		do
			[[ -n $resolution ]] || { echo "Please try again." >&2; continue; }
			break
		done
	fi

	[[ $resolution = abort ]] && exit 1
	[[ $resolution = best ]] && resolution='' ||
		resolution=" -S res:$resolution"
}

embedtranscription() {
	local url="$1"
	local filename="$2"
	[[ -z $filename || ! -f $filename ]] && { echo "Error: Invalid filename"; return 1; }

	local temp_dir=$(mktemp -d)
	trap 'rm -rf "$temp_dir"' EXIT

	echo "Debug: Getting transcripts for $url"
	local metadata_file="${temp_dir}/metadata.txt"
	echo ";FFMETADATA1" > "$metadata_file"
	local found_transcripts=0

	for lang in en de; do
		yt-dlp --skip-download \
			   --write-subs --write-auto-subs \
			   --sub-lang "$lang" \
			   --sub-format "ttml" \
			   --convert-subs "srt" \
			   --output "${temp_dir}/subs.%(ext)s" \
			   "$url" 2>/dev/null

		local transcript_file="${temp_dir}/subs.${lang}.srt"
		if [[ -f $transcript_file ]]; then
			echo "Debug: Found transcript for $lang"
			local transcript=$(sed -i -e '/^[0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9][0-9][0-9] --> [0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9][0-9][0-9]$/d' \
									-e '/^[[:digit:]]\{1,4\}$/d' \
									-e 's/<[^>]*>//g' \
									"$transcript_file" && \
							 sed -e '/^[[:space:]]*$/d' "$transcript_file" | \
							 tr '\n' ' ' | \
							 sed -e 's/\s\+/ /g' \
								 -e 's/^ *//;s/ *$//' \
								 -e 's/[=;#\[\]]/\\&/g')

			[[ -n $transcript ]] && {
				echo "Transcript${lang}=${transcript}" >> "$metadata_file"
				found_transcripts=1
			}
		fi
	done

	if [[ $found_transcripts -eq 1 ]]; then
		local temp_output="${temp_dir}/output.mkv"
		ffmpeg -i "$filename" -i "$metadata_file" -map_metadata 1 \
			   -c copy "$temp_output" && \
		mv "$temp_output" "$filename" && \
		echo "Debug: Successfully embedded transcripts"
	fi
}

_yt_dlp() {
	# Handle resolution selection first if needed
	[[ -n "$ytbraw" ]] && set_yt_resolution

	# Single yt-dlp call for metadata and download
	if [[ ! -f $filename.mkv ]]; then
		[[ -n "$ytbraw" ]] && [[ ! $(basename $PWD) = Youtube ]] && \
			mkdir -pv Youtube && cd Youtube

		# Get the actual filename from yt-dlp if not set
		if [[ -z $filename ]]; then
			# Get filename from yt-dlp template
			filename=$(yt-dlp --print filename \
							 -o '%(channel)s - %(upload_date)s – %(title).200s' \
							 "$get_url" | \
					  sed -e 's/：/:/g' \
						  -e 's/[\\/*?"<>|]/-/g' \
						  -e 's/\s\+/ /g' \
						  -e 's/[[:space:]]*$//g')
		fi

		# Store the base filename without extension
		local base_filename="$filename"

		cmd+=("yt-dlp" "-i" "\"$@\"" \
			"--embed-metadata" "--write-thumbnail" "--embed-chapters" \
			"--sub-langs" "en,de" \
			"--write-subs" "--write-auto-subs" \
			"--sub-format" "ttml" \
			"--convert-subs" "srt" \
			"--merge-output-format" "mkv" \
			"--exec" "'touch -m -a {}'" \
			"$resolution" \
			"-o" "\"${base_filename}.%(ext)s\"")
		
		eval $(printf "%s " "${cmd[@]}")
		
		# Process thumbnail and transcripts in a single ffmpeg call
		if [[ -n $ytbraw ]]; then
			local temp_dir=$(mktemp -d)
			trap 'rm -rf "$temp_dir"' EXIT
			local metadata_file="${temp_dir}/metadata.txt"
			echo ";FFMETADATA1" > "$metadata_file"
			local found_transcripts=0

			# Convert webp to jpg if exists
			[[ -f "${base_filename}.webp" ]] && {
				ffmpeg -i "${base_filename}.webp" \
					   -frames:v 1 \
					   -update 1 \
					   "${base_filename}.jpg" && \
				rm "${base_filename}.webp"
			}

			# Process transcripts
			for lang in en de; do
				local srt_file="${base_filename}.${lang}.srt"
				echo "Debug: Looking for transcript file: $srt_file"
				if [[ -f $srt_file ]]; then
					echo "Debug: Processing transcript for $lang"
					local transcript=$(sed -i -e '/^[0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9][0-9][0-9] --> [0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9][0-9][0-9]$/d' \
										-e '/^[[:digit:]]\{1,4\}$/d' \
										-e 's/<[^>]*>//g' \
										"$srt_file" && \
								 sed -e '/^[[:space:]]*$/d' "$srt_file" | \
								 tr '\n' ' ' | \
								 sed -e 's/\s\+/ /g' \
									 -e 's/^ *//;s/ *$//' \
									 -e 's/[=;#\[\]]/\\&/g')

					[[ -n $transcript ]] && {
						echo "Debug: Adding $lang transcript to metadata"
						echo "Transcript${lang}=${transcript}" >> "$metadata_file"
						found_transcripts=1
						rm "$srt_file"
					}
				else
					echo "Debug: No transcript file found for $lang"
				fi
			done

			# Single ffmpeg call for both thumbnail and transcripts
			if [[ $found_transcripts -eq 1 || -f "${base_filename}.jpg" ]]; then
				echo "Debug: Embedding transcripts and thumbnail"
				local temp_output="${temp_dir}/output.mkv"
				if [[ -f "${base_filename}.jpg" ]]; then
					ffmpeg -i "${base_filename}.mkv" \
						   -i "${base_filename}.jpg" \
						   -i "$metadata_file" \
						   -map 0 -map 1 \
						   -map_metadata 2 \
						   -c copy \
						   -disposition:v:1 attached_pic \
						   "$temp_output" && \
					mv "$temp_output" "${base_filename}.mkv" && \
					rm "${base_filename}.jpg" && \
					echo "Debug: Successfully embedded transcripts and thumbnail"
				else
					ffmpeg -i "${base_filename}.mkv" \
						   -i "$metadata_file" \
						   -map 0 \
						   -map_metadata 1 \
						   -c copy \
						   "$temp_output" && \
					mv "$temp_output" "${base_filename}.mkv" && \
					echo "Debug: Successfully embedded transcripts"
				fi
			fi
		fi
	fi
}

printtranscript() {
	local file="$1"
	local lang="${2:-en}"  # defaults to English if not specified
	
	ffprobe -v quiet -show_entries format_tags=Transcript${lang} \
			-of default=noprint_wrappers=1:nokey=1 \
			"$file"
}

listmetadata() {
	local file="$1"
	ffprobe -v quiet -show_entries format_tags -of default=noprint_wrappers=1 "$file"
}

# Usage examples:
# printtranscript video.mkv     # prints English transcript
# printtranscript video.mkv de  # prints German transcript
