#!/bin/bash

set -e

set_yt_resolution() {
	PS3="Enter a number: "

	if [[ -z $resoultion ]]; then
		select resolution in best 144 240 360 480 720 1080 2160 abort
		do
			[[ -n $resolution ]] || { echo "Please try again." >&2; continue; }
			break
		done
	fi

	[[ $resolution = abort ]] && exit 1
	[[ $resolution = best ]] && resolution='' ||
		resolution=" -S res:$resolution"
}

embedtranscription() {
	local url="$1"
	local filename="$2"
	[[ -z $filename || ! -f $filename ]] && { echo "Error: Invalid filename"; return 1; }

	local temp_dir=$(mktemp -d)
	trap 'rm -rf "$temp_dir"' EXIT

	echo "Debug: Getting transcripts for $url"
	yt-dlp --skip-download \
		   --write-auto-subs --write-subs \
		   --sub-langs "en,de" \
		   --sub-format "vtt" \
		   --convert-subs "srt" \
		   --output "${temp_dir}/subs.%(ext)s" \
		   "$url"

	# Create metadata file
	local metadata_file="${temp_dir}/metadata.txt"
	echo ";FFMETADATA1" > "$metadata_file"

	local found_transcripts=0
	for lang in en de; do
		local transcript_file="${temp_dir}/subs.${lang}.srt"
		if [[ -f $transcript_file ]]; then
			echo "Debug: Found transcript for $lang: $transcript_file"
			local transcript=$(sed -E '/^[0-9]+$|^[0-9:.-> ]+$/d' "$transcript_file" | \
							 sed 's/<[^>]*>//g' | \
							 tr '\n' ' ' | \
							 sed 's/\s\+/ /g' | \
							 sed 's/^ *//;s/ *$//' | \
							 sed 's/[=;#\[\]]/\\&/g')  # Escape special characters
			[[ -n $transcript ]] && {
				echo "Transcript${lang}=${transcript}" >> "$metadata_file"
				found_transcripts=1
			}
		else
			echo "Debug: No transcript file found for $lang"
		fi
	done

	if [[ $found_transcripts -eq 1 ]]; then
		echo "Debug: Embedding transcripts using metadata file"
		# Create safe temporary filename
		local temp_output="${temp_dir}/output.mkv"
		ffmpeg -i "$filename" -i "$metadata_file" -map_metadata 1 \
			   -c copy "$temp_output" && \
		mv "$temp_output" "$filename" && \
		echo "Debug: Successfully embedded transcripts"
	else
		echo "Debug: No transcripts found to embed"
	fi
}

_yt_dlp() {
	# Handle resolution selection first if needed
	[[ -n "$ytbraw" ]] && set_yt_resolution

	# Get all needed info in a single yt-dlp call
	if [[ -z $filename ]]; then
		local json_info=$(yt-dlp -J --no-download "$get_url")
		local channel=$(echo "$json_info" | jq -r '.channel')
		local upload_date=$(echo "$json_info" | jq -r '.upload_date')
		local title=$(echo "$json_info" | jq -r '.title')
		filename="${upload_date} â€“ ${channel} - ${title}"
	fi

	# Build collector array
	[[ -n $islive ]] && collector+=('--downloader' 'ffmpeg' '--hls-use-mpegts')
	collector+=("-o" "\"$filename\"")
	collector+=('--sub-lang' 'en,de' '--embed-subs' '--write-auto-subs')

	# Handle download
	if [[ ! -f $filename.mkv ]]; then
		[[ -n "$ytbraw" ]] && [[ ! $(basename $PWD) = Youtube ]] && \
			mkdir -pv Youtube && cd Youtube

		cmd+=("yt-dlp" "-i" "\"$@\"" \
			"--embed-metadata" "--write-thumbnail" "--embed-chapters" \
			"--merge-output-format" "mkv" \
			"--exec" "'touch -m -a {}'" \
			"$resolution" \
			"${collector[@]}")
		
		eval $(printf "%s " "${cmd[@]}")
		
		[[ -f $filename.webp ]] && \
			ffmpeg -i "$filename.webp" "$filename.jpg" && rm "$filename.webp"
	fi

	[[ -n $ytbraw ]] && embedtranscription "$@" "$filename.mkv"
}

printtranscript() {
	local file="$1"
	local lang="${2:-en}"  # defaults to English if not specified
	
	ffprobe -v quiet -show_entries format_tags=Transcript${lang} \
			-of default=noprint_wrappers=1:nokey=1 \
			"$file"
}

listmetadata() {
	local file="$1"
	ffprobe -v quiet -show_entries format_tags -of default=noprint_wrappers=1 "$file"
}

# Usage examples:
# printtranscript video.mkv     # prints English transcript
# printtranscript video.mkv de  # prints German transcript
