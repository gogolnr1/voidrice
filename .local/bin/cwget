#!/bin/bash
# normal wget: wget "<url to download>" -o "<filename>"
# this script: cwget "<filename>" <-- gets url via xclip
#
# features:
# - take second entry from greenclip as possible filename
# - use yt-dlp or wget depending on clipboard content
# - try to continue downloading existing file after confirming continuation
# - can be called via system keybindings, then asks for filename via dmenu prompt
# - autocompletes with .mp4 if no suffix is given
# - also accepts curl calls

# if not executed from terminal ask for filename via dmenu
if [[ $TERM = linux ]]; then
	wm_name=$(xprop -id "$(xdotool getwindowfocus)" WM_NAME | awk -F '"' '{print $2}' | awk -F ' - ' '{print $NF}')
	if [[ $wm_name == "Brave" ]]; then
		extractcurrenturl
	else
		filename="$(dmenu -p 'Filename:' < /dev/null)"
		[[ -z $filename ]] && exit 0
	fi

	# execute same script in new terminal session
	# and close terminal if successful
	eval "$TERMINAL -e ${BASH_SOURCE:-$0} --eval \"$filename\" && exit 0"

	exit $?
fi

source "$HOME/.config/shell/rc.d/00_colors"

set -e

case $1 in
	--eval) iseval=1 && shift;;
	--live) islive=1 && shift;;
	--url) get_url="$2" && shift && shift;;
esac

[[ -n $iseval ]] && cd ${XDG_VIDEOS_DIR:-$HOME/Videos} || cd $(dirname -- "$1")

colorize () {
	printf "${BI}$1${NC}"
}

set-yt-resolution() {
	PS3="Enter a number: "

	select resolution in best 144 240 360 480 720 1080 2160 abort
	do
		[[ -n $resolution ]] || { echo "Please try again." >&2; continue; }
		break
	done

	[[ $resolution = abort ]] && exit 1
	[[ $resolution = best ]] && resolution='' ||
		resolution=" -S res:$resolution"
}

recreatetimestamp() {
	filename=$(ls -t "$filename"* | head -1)
	touch -a -m "$filename"
}

embedtranscription() {
	[[ -n ytbraw ]] &&
		yt-dlp --skip-download \
			--write-subs --write-auto-subs \
			--sub-lang en,de --sub-format ttml \
			--convert-subs srt "$@" \
			-o "transcript.%(ext)s" || exit 0
	for lang in en de; do
		# Check if the file exists to avoid errors
		if [[ -f "transcript.$lang.srt" ]]; then
			local srt_file="transcript.$lang.srt"
			local output_file="output.$lang.txt"

			# Clean the subtitle file and remove unnecessary lines
			sed -i '' \
			-e '/^[0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9][0-9][0-9] --> [0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9][0-9][0-9]$/d' \
			-e '/^[[:digit:]]\{1,4\}$/d' \
			-e 's/<[^>]*>//g' \
			-e '/^[[:space:]]*$/d' \
			"$srt_file"

			# Concatenate the cleaned subtitles into a single line
			tr '\n' ' ' < "$srt_file" > "$output_file"
			transcript_content=$(tr '\n' ' ' < "$srt_file")

			# Build the metadata parameters
			transcript_metadata+=("-metadata" "Transcript$lang=\"$transcript_content\"")
		fi
	done

	# Construct the ffmpeg command using an array
	cmd=("ffmpeg" "-i" "\"$filename.mkv\"" "${transcript_metadata[@]}" \
		"-attach" "\"$filename.webp\"" "-metadata:s:t" "mimetype=image/jpeg" \
		"-c" "copy" "\"temp_$filename.mkv\"")
	# Join the array elements into a single string and execute the command using eval
	# then overwrite original file and remove temporary files
	eval $(printf "%s " "${cmd[@]}") && \
	mv "temp_$filename.mkv" "$filename.mkv" && \
	rm "transcript.*" "output.*" "$filename.webp"
}

_yt-dlp() {
	[[ -n $islive ]] && usets='--downloader ffmpeg --hls-use-mpegts'
	if [[ -z $filename ]]; then
		# exctract filename, upload_date and channel name for a more comprehensive filename
		while IFS= read -r fcu; do
			fcu+=("$fcu")
		done <<< $(yt-dlp --print filename --print channel --print upload_date "$get_url")
		filename="${fcu[2]} â€“ ${fcu[3]} - ${fcu[1]}"
		[[ -z $subs ]] && subs='--sub-lang en,de --embed-subs --write-auto-subs'
	fi
	if [[ ! -f $filename ]]; then
		[[ -n "$ytbraw" ]] && mkdir -pv Youtube && cd Youtube && set-yt-resolution
		yt-dlp --embed-metadata --write-thumbnail \
			-i $subs $usets $resolution "$@" \
			-o "$filename" --merge-output-format mkv
		embedtranscription "$@"
	fi

	recreatetimestamp
}

overwrite () {
	local f=$(colorize "$1")
	echo "[o]verwite or [c]ontinue $f? -- nothing to exit"
	read ANSWER
	case $ANSWER in
		[o])
			rm "$filename"
			printf "$f removed\n\n"
		;;
		[c])
			continue=1
			printf "continueing $f\n\n"
		;;
		*) exit 0 ;;
	esac
}

# get current clipboard content as downlaod source
[[ -z $get_url ]] && get_url=$(xclip -selection clipboard -o -print0)

# determine which tool to use
case $get_url in
	*"youtu"*) yt=1 && ytbraw=1 ;;
 	*".m3u8"*) yt=1 ;;&
	"curl "*) crl=1 ;;
	"http"* ) wgt=1 ;;
	*       )
		echo "Clipboard content has no valid download pattern. Exiting."
		exit 0
	;;
esac

# remove list parameter from url to prevent downloading whole playlist
[[ -n $ytbraw ]] && get_url=${get_url%%?list*}

# try to guess filename from 2nd last entry of clipboard history using greenclip
#cd - &> /dev/null
if [[ -z "$1" ]]
then
	[[ -z "$ytbraw" ]] && command -v greenclip &> /dev/null &&
    		filename="$(greenclip print | sed -n 2p)" &&
		[[ $filename =~ ^[a-zA-Z0-9_.[:space:]-]+$ ]] || filename=""
else
	filename="$1"
fi

# Check if file name is part of a series and increment episode number accordingly
files=( "$filename"* )
#regx='(.*) S([0-9]{2})E([0-9]{2})'
regx='/^([\w\s]+) S(\d{2})E(\d{2})(\.[a-z]+)?$/i'
if [[ $(printf "%s\n" "${files[@]}" | wc -l) -gt 0 ]]; then
	if [[ -f ${files[-1]} ]] && [[ "${files[-1]}" =~ $regx ]]; then
		title="${BASH_REMATCH[1]}"
		season="${BASH_REMATCH[2]}"
		episode=$((${BASH_REMATCH[3]}+1))
		episode=$(printf "%02d\n" $episode)
		filename="$title S${season}E${episode}"
	fi
fi

# if filename not empty & without file extension, fill in mp4 extension
[ -n "${filename}" ] && [[ $filename != *.* ]] &&
	filename="$filename.mp4"

# if file exists ask to continue or to overwrite file
[[ -f "$filename" ]] && overwrite "$filename"

# translate curl headers to wget and yt-dlp
if [[ -n $crl ]] ; then
	[[ -z $yt ]] &&
		get_url=$(echo ${get_url#curl } | sed -e 's/-H/--header/g') ||
		get_url=$(echo ${get_url#curl } | sed -e 's/-H/--add-header/g')
	wgt=1
fi

# if m3u8 or youtube link, use yt-dlp
[[ -n $yt ]] && _yt-dlp "$get_url" && exit 0

# use wget
if [[ -n $wgt ]] ; then
	while true ; do
		[[ -n $filename ]] && [[ -f $filename ]] &&
			wget_parms="-c"
		[[ -z $filename ]] &&
			filename=$(printf '%b' "$(echo "$get_url" | sed 's/%/\\x/g')") &&
			filename=$(basename "$filename")
		[[ ! $filename =~ \.[a-zA-Z0-9]+$ ]] &&
			echo "$filename is not a valid filename" && exit 1
		eval "wget -T 5 $wget_parms $get_url -O '$filename' && break;"
	done
	recreatetimestamp
	exit 0
fi

# bash --rcfile <(echo "$TERMINAL -e sleep 5; mpv '$filename'")
