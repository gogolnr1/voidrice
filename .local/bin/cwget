#!/bin/bash
# normal wget: wget "<url to download>" -o "<filename>"
# this script: cwget "<filename>" <-- gets url via xclip
#
# features:
# - take second entry from greenclip as possible filename
# - use yt-dlp or wget depending on clipboard content
# - try to continue downloading existing file after confirming continuation
# - can be called via system keybindings, then asks for filename via dmenu prompt
# - autocompletes with .mp4 if no suffix is given
# - also accepts curl calls

# Configuration
CONFIG_DIR="$HOME/.config/cwget"
ACCESSOIORS_FILE="$HOME/.local/bin/accessoirs/yt-accs"
DOWNLOAD_DIR="${XDG_VIDEOS_DIR:-$HOME/Videos}"
TERMINAL="${TERMINAL:-xterm}"

# if not executed from terminal ask for filename via dmenu
if [[ $TERM = linux ]]; then
	wm_name=$(xprop -id "$(xdotool getwindowfocus)" WM_NAME | awk -F '"' '{print $2}' | awk -F ' - ' '{print $NF}')
	case $wm_name in
		*"Brave" | *"LibreWolf") extractcurrenturl ;;
		*) filename="$(dmenu -p 'Filename:' < /dev/null)" &&
			[[ -z $filename ]] && exit 1 ;;
	esac

	# execute same script in new terminal session
	# and close terminal if successful
	eval "$TERMINAL -e ${BASH_SOURCE:-$0} --eval \"$filename\" && exit 0"

	exit $?
fi

set -e

source "$HOME/.config/shell/rc.d/00_colors"
source "$ACCESSOIORS_FILE" || exit 1

case $1 in
	--eval) iseval=1 && shift;;
	--live) islive=1 && shift;;
	--res) resoultion="$2" && shift && shift;;
	--url) get_url="$2" && shift && shift;;
	--download-list) dllist=1 && shift;;
esac

[[ -n $iseval ]] && cd "$DOWNLOAD_DIR" || cd $(dirname -- "$1")

colorize () {
	printf "${BI}$1${NC}"
}

overwrite () {
	local f=$(colorize "$1")
	echo "[o]verwite or [c]ontinue $f? -- nothing to exit"
	read ANSWER
	case $ANSWER in
		[o])
			rm "$filename"
			printf "$f removed\n\n"
		;;
		[c])
			continue=1
			printf "continueing $f\n\n"
		;;
		*) exit 0 ;;
	esac
}

# Define a unified error handling function
error_exit() {
	local message="$1"
	notify-send -u critical "cwget error" "$message"
	echo "$message" >&2
	exit 1
}

# Define a new function to consolidate URL detection
detect_download_method() {
	local url="$1"
	if [[ "$url" == *".youtu"* || "$url" == *"/youtu"* ]]; then
		yt=1
		ytbraw=1
	elif [[ "$url" == curl* ]]; then
		crl=1
	elif [[ "$url" == *".m3u8"* ]]; then
		yt=1
		unset wgt
	elif [[ "$url" == http* ]]; then
		wgt=1
	else
		echo "Clipboard content has no valid download pattern. Exiting."
		error_exit "$message"
	fi
}

# get current clipboard content as download source
[[ -z $get_url ]] && get_url=$(xclip -selection clipboard -o -print0)

# determine which tool to use
detect_download_method "$get_url"

# remove list parameter from url to prevent downloading whole playlist
if [[ -n $ytbraw ]]; then
	get_url=${get_url%%?list*}
fi

# Define a new function for filename generation
generate_filename() {
	local input="$1"
	if [[ -z "$input" ]]; then
		if [[ -z "$ytbraw" ]] && command -v greenclip &> /dev/null; then
			filename="$(greenclip print | sed -n 2p)"
			[[ $filename =~ ^[a-zA-Z0-9_.[:space:]-]+$ ]] || filename=""
		fi
		
		# If still no filename, prompt user
		if [[ -z "$filename" ]] && [[ -z "$ytbraw" ]]; then
			read -p "Enter filename:" filename
			[[ -z "$filename" ]] && error_exit "No filename provided"
		fi
	else
		filename="$input"
	fi

	# Check if file name is part of a series and increment episode number accordingly
	local files=( "$filename"* )
	regx='^([\w\s]+) S(\d{2})E(\d{2})(\.[a-z]+)?$'
	if [[ ${#files[@]} -gt 0 ]]; then
		if [[ -f "${files[-1]}" ]] && [[ "${files[-1]}" =~ $regx ]]; then
			local title="${BASH_REMATCH[1]}"
			local season="${BASH_REMATCH[2]}"
			local episode=$((${BASH_REMATCH[3]} + 1))
			episode=$(printf "%02d" "$episode")
			filename="$title S${season}E${episode}"
		fi
	fi

	# Only add extension for non-yt downloads if the filename doesn't already have an extension
	if [[ -z "$yt" ]] && [[ -n "$filename" ]] && [[ ! "$filename" =~ \.[^.]+$ ]]; then
		filename="$filename.mp4"
	fi
}

# Generate filename
generate_filename "$1"

# if file exists ask to continue or to overwrite file
[[ -f "$filename" ]] && overwrite "$filename"

# translate curl headers to wget and yt-dlp
if [[ -n $crl ]] ; then
	[[ -z $yt ]] &&
		get_url=$(echo ${get_url#curl } | sed -e 's/-H/--header/g') ||
		get_url=$(echo ${get_url#curl } | sed -e 's/-H/--add-header/g')
	wgt=1
fi

################################################

yt=1 # seems as if this is the new standard now...

# Define a new function for unified download handling
download() {
	local method="$1"
	local url="$2"
	if [[ "$method" == "yt-dlp" ]]; then
		_yt_dlp "$url"
		notify-send -t 5000 "cwget" "Download completed: $filename"
	elif [[ "$method" == "wget" ]]; then
		while true; do
			[[ -n $filename ]] && [[ -f $filename ]] && wget_parms="-c"
			[[ -z $filename ]] && {
				filename=$(printf '%b' "$(echo "$url" | sed 's/%/\\x/g')")
				filename=$(basename "$filename")
			}
			[[ ! $filename =~ \.[a-zA-Z0-9]+$ ]] && {
				echo "$filename is not a valid filename"
				error_exit "$message"
			}
			eval "wget -T 5 $wget_parms \"$url\" -O \"$filename\" && break;"
		done
		touch -m -a "$filename"
		notify-send -t 5000 "cwget" "Download completed: $filename"
	else
		echo "Unsupported download method: $method"
		error_exit "$message"
	fi
}

# if m3u8 or youtube link, use yt-dlp
if [[ -n $yt ]]; then
	download "yt-dlp" "$get_url"
	exit 0
fi

# use wget
if [[ -n $wgt ]] && [[ -z $yt ]]; then
	download "wget" "$get_url"
fi
