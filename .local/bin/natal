#!/bin/python3

import swisseph as swe
import datetime
#from datetime import datetime

from zoneinfo import ZoneInfo

def calculate_house(longitude, house_cusps):
    """
    Berechnet das Haus für eine gegebene Längenkoordinate

    :param longitude: Längenkoordinate des Himmelskörpers
    :param house_cusps: Liste der Häuserkuppen
    :return: Name des Hauses
    """
    house_names = [
        '  1 |   |   |     ',
        '   2|   |   |     ',
        '    |3  |   |     ',
        '    | 4 |   |     ',
        '    |  5|   |     ',
        '    |   |6  |     ',
        '    |   | 7 |     ',
        '    |   |  8|     ',
        '    |   |   |9    ',
        '    |   |   | 10  ',
        '    |   |   |   11',
        '12  |   |   |     '
    ]

    for i in range(12):
        if i < 11:
            if house_cusps[i] <= longitude < house_cusps[i+1]:
                return house_names[i]
        else:
            # Spezielle Behandlung für das letzte Haus (Umrundung)
            if longitude >= house_cusps[11] or longitude < house_cusps[0]:
                return house_names[11]

    return 'Undefined'

def convert_to_utc(local_time, timezone='Europe/Berlin'):
    """
    Convert local time to UTC, considering daylight saving time

    :param local_time: Local datetime object
    :param timezone: Timezone string (default is Berlin/Germany)
    :return: UTC datetime
    """
    # Ensure the local time is timezone-aware
    local_time_with_tz = local_time.replace(tzinfo=ZoneInfo(timezone))

    # Convert to UTC
    utc_time = local_time_with_tz.astimezone(datetime.timezone.utc)

    return utc_time

def calculate_natal_chart(birth_date, birth_time, latitude, longitude, timezone='Europe/Berlin'):
    """
    Generate a detailed natal chart for given birth details

    :param birth_date: datetime object with birth date
    :param birth_time: time of birth (float, e.g., 14.5 for 2:30 PM)
    :param latitude: birth location latitude
    :param longitude: birth location longitude
    :return: Dictionary of planetary positions
    """

    # Convert time to datetime
    hours = int(birth_time)
    minutes = int((birth_time % 1) * 60)

    # Create local datetime
    local_datetime = datetime.datetime.combine(
        birth_date,
        datetime.time(hours, minutes)
    )

    # Convert to UTC
    birth_date = convert_to_utc(local_datetime, timezone)

    # Set Swiss Ephemeris to useUT (Universal Time)
    jul_day = swe.julday(
        birth_date.year,
        birth_date.month,
        birth_date.day,
        birth_date.hour + birth_date.minute / 60.0
    )

    # Set sidereal mode with Lahiri ayanamsa
    SIDEREAL_MODE = swe.SIDM_LAHIRI  # Use Lahiri ayanamsa
    swe.set_sid_mode(SIDEREAL_MODE, 0, 0)

    ayanamsa = swe.get_ayanamsa_ut(jul_day)

    # Set geographic location
    swe.set_topo(longitude, latitude, 0)

    # use placidus house system
    ascmc_data = swe.houses(jul_day, latitude, longitude, b'P')
    #print(f"{ayanamsa}")

    house_cusps = ascmc_data[0]

    # Calculate positions
    natal_chart = {}
    natal_chart['Ascendant'] = {}
    for name, planet in planets.items():
        # Calculate planet position
        planet_data = swe.calc_ut(jul_day, planet, swe.FLG_SIDEREAL)
        longitude, _, _, _, _, _ = planet_data[0] # Extract the longitude value

        # Store longitude and sign
        sign = int(longitude / 30)

        # Calculate degrees and minutes
        degrees = int(longitude % 30)
        minutes = int((longitude % 1) * 60)
        house = calculate_house(longitude + ayanamsa, house_cusps)

        natal_chart[name] = {
            'longitude': longitude,
            'latitude': latitude,
            'sign': sign_names[sign],
            'degree': degrees,
            'minutes': minutes,
            'house': house
        }

    # Calculate Ascendant
    ascendant_longitude = house_cusps[0] - ayanamsa
    ascendant_sign = int(ascendant_longitude / 30)

    # Calculate ascendant degrees and minutes
    ascendant_degrees = int(ascendant_longitude % 30)
    ascendant_minutes = int((ascendant_longitude % 1) * 60)

    natal_chart['Ascendant'] = {
        'longitude': ascendant_longitude,
        'latitude': 0,
        'sign': sign_names[ascendant_sign],
        'degree': ascendant_degrees,
        'minutes': ascendant_minutes,
        'house': ''
    }

    # Print the natal chart in a table-like format
    print("Planetary Positions:")
    print("-" * 55)
    print(f"{'Planet':10} | {'Sign':12} | {'House':16} | {'Deg. Min.':8}")
    print("-" * 55)
    for planet, details in natal_chart.items():
        print(f"{planet:10} | {details['sign']:12} |{details['house']:18}| {details['degree']:3}°{details['minutes']:3}'")
    print("-" * 55)

    return natal_chart

def calculate_transits(natal_chart, current_time=None, timezone='Europe/Berlin'):
    """
    Berechnet die aktuellen Transite im Verhältnis zum Geburtshoroskop

    :param natal_chart: Das ursprüngliche Geburtshoroskop
    :param current_time: Zeitpunkt für die Transitberechnung (Standard: aktueller Zeitpunkt)
    :return: Dictionary mit Transitinformationen
    """

    #print(f"{natal_chart}")
    # Wenn keine Zeit angegeben, nutze aktuelle Zeit
    if current_time is None:
        current_time = datetime.datetime.now()

    # Convert to UTC
    current_time = convert_to_utc(current_time, timezone)

    # Julianisches Datum für aktuellen Zeitpunkt
    jul_day = swe.julday(
        current_time.year,
        current_time.month,
        current_time.day,
        current_time.hour + current_time.minute / 60.0
    )

    # Siderischer Modus
    SIDEREAL_MODE = swe.SIDM_LAHIRI
    swe.set_sid_mode(SIDEREAL_MODE, 0, 0)
    ayanamsa = swe.get_ayanamsa_ut(jul_day)

    # Häuser für Transit berechnen
    swe.set_topo(birth_longitude, birth_latitude,0)

    # Häuserkuppen berechnen (Placidus)
    house_cusps = swe.houses(jul_day, birth_latitude, birth_longitude, b'P')[0]

    # Transit-Berechnungen
    transit_details = {}
    transit_details['Ascendant'] = {}
    for planet_name, planet_id in planets.items():
        # Aktuelle Position des Planeten
        planet_data = swe.calc_ut(jul_day, planet_id, swe.FLG_SIDEREAL)
        current_longitude = planet_data[0][0]

        # Geburtsposition des Planeten
        natal_longitude = natal_chart[planet_name]['longitude']

        # Berechnung der Differenz
        longitude_diff = (current_longitude - natal_longitude + 360) % 360

        # Aspektberechnungen
        def calculate_aspect(diff):
            if abs(diff) < 5:
                return 'Conjunction'
            elif abs(diff - 180) < 5:
                return 'Opposition'
            elif abs(diff - 90) < 5:
                return 'Quadrant'
            elif abs(diff - 120) < 5:
                return 'Trine'
            elif abs(diff - 60) < 5:
                return 'Sextil'
            return ''

        # Aktuelle Signberechnung
        current_sign = int(current_longitude / 30)
        current_sign_name = sign_names[current_sign]
        current_house = calculate_house(current_longitude + ayanamsa, house_cusps)

        # Speichere Transitinformationen
        transit_details[planet_name] = {
            'current_longitude': current_longitude,
            'current_sign': current_sign_name,
            'natal_longitude': natal_longitude,
            'longitude_difference': longitude_diff,
            'aspect': calculate_aspect(longitude_diff),
            'current_house': current_house
        }

    # Calculate Ascendant
    ascendant_longitude = house_cusps[0]  - ayanamsa
    ascendant_sign = int(ascendant_longitude / 30)

    # Calculate ascendant degrees and minutes
    ascendant_degrees = int(ascendant_longitude % 30)
    ascendant_minutes = int((ascendant_longitude % 1) * 60)

    transit_details['Ascendant'] = {
        'longitude': ascendant_longitude,
        'latitude': 0,
        'current_sign': sign_names[ascendant_sign],
        'degree': ascendant_degrees,
        'minutes': ascendant_minutes,
        'current_house': '',
        'aspect': ''
    }

    # Ausgabe der Transitinformationen
    print(f"\nTransit analysis for: {current_time.strftime('%Y-%m-%d %H:%M:%S %Z')}")
    print("-" * 55)
    print(f"{'Planet':10} | {'Current sign':12} | {'Current house':16} | {'Aspect':20}") # | {'Difference':10}")
    print("-" * 55)
    for planet, details in transit_details.items():
        print(f"{planet:10} | {details['current_sign']:12} |{details['current_house']:18}| {details['aspect']:20}") # | {details['longitude_difference']:10.2f} ")
    print("-" * 55)

    return transit_details

# Example usage
if __name__ == "__main__":
    # Sign names
    sign_names = [
        'Aries', 'Taurus', 'Gemini', 'Cancer',
        'Leo', 'Virgo', 'Libra', 'Scorpio',
        'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'
    ]

    # Planets to track
    planets = {
        'Sun': swe.SUN,
        'Moon': swe.MOON,
        'Mercury': swe.MERCURY,
        'Venus': swe.VENUS,
        'Mars': swe.MARS,
        'Jupiter': swe.JUPITER,
        'Saturn': swe.SATURN,
        'Uranus': swe.URANUS,
        'Neptune': swe.NEPTUNE,
        'Pluto': swe.PLUTO
    }

    # Sample birth details
    birth_date = datetime.date(1984, 5, 14)
    birth_time = 5.43  # 5:25 AM / UTS 3:25
    birth_latitude = 53.0333333
    birth_longitude = 9.0166667
    #birth_longitude = birth_longitude - 11.715 # hacking it to a value where the ASC value sits right

    # Generate natal chart
    natal_chart = calculate_natal_chart(
            birth_date,
            birth_time,
            birth_latitude,
            birth_longitude,
            timezone='Europe/Berlin')

    # Berechne aktuelle Transite
    current_transits = calculate_transits(natal_chart, datetime.datetime.strptime('2024-12-18 18:40:00', "%Y-%m-%d %H:%M:%S"))
