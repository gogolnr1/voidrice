#!/usr/bin/env python3
"""
Astrological Chart and Transit Calculator

This module provides comprehensive functionality for calculating natal charts
and planetary transits using Swiss Ephemeris library.

Features:
- Sidereal astrological calculations
- Natal chart generation
- Transit analysis
- Timezone and UTC conversion
- Detailed planetary and house positioning

Dependencies:
- swisseph
- datetime
- zoneinfo
"""

import datetime
from zoneinfo import ZoneInfo
import swisseph as swe

class AstrologicalCalculator:
    """
    A comprehensive class for astrological calculations and chart generation.

    Supports sidereal astrological calculations with Lahiri ayanamsa,
    precise timezone handling, and detailed transit analysis.
    """

    # Class-level constants for better maintainability
    SIDEREAL_MODE = swe.SIDM_LAHIRI
    HOUSE_SYSTEM = b'P'  # Placidus house system

    def __init__(self, timezone='Europe/Berlin'):
        """
        Initialize the calculator with default settings.

        :param timezone: Default timezone for calculations
        """
        self.timezone = timezone
        self._setup_constants()

    def _setup_constants(self):
        """Set up astronomical and astrological constants."""
        self.sign_names = [
            'Aries', 'Taurus', 'Gemini', 'Cancer',
            'Leo', 'Virgo', 'Libra', 'Scorpio',
            'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'
        ]

        self.planets = {
            'Sun': swe.SUN,
            'Moon': swe.MOON,
            'Mercury': swe.MERCURY,
            'Venus': swe.VENUS,
            'Mars': swe.MARS,
            'Jupiter': swe.JUPITER,
            'Saturn': swe.SATURN,
            'Uranus': swe.URANUS,
            'Neptune': swe.NEPTUNE,
            'Pluto': swe.PLUTO
        }

        # New planetary dignity mappings
        self.planetary_dignities = {
            # Rulership: The sign a planet naturally governs
            'rulership': {
                'Sun': 'Leo',
                'Moon': 'Cancer',
                'Mercury': ['Gemini', 'Virgo'],
                'Venus': ['Taurus', 'Libra'],
                'Mars': ['Aries', 'Scorpio'],
                'Jupiter': ['Sagittarius', 'Pisces'],
                'Saturn': ['Capricorn', 'Aquarius'],
                'Uranus': 'Aquarius',
                'Neptune': 'Pisces',
                'Pluto': 'Scorpio'
            },

            # Exaltation: Sign where a planet is most powerful
            'exaltation': {
                'Sun': 'Aries',
                'Moon': 'Taurus',
                'Mercury': 'Virgo',
                'Venus': 'Pisces',
                'Mars': 'Capricorn',
                'Jupiter': 'Cancer',
                'Saturn': 'Libra'
            },

            # Detriment: Sign where a planet struggles
            'detriment': {
                'Sun': 'Aquarius',
                'Moon': 'Capricorn',
                'Mercury': ['Sagittarius', 'Pisces'],
                'Venus': ['Aries', 'Scorpio'],
                'Mars': ['Libra', 'Taurus'],
                'Jupiter': ['Gemini', 'Virgo'],
                'Saturn': ['Cancer', 'Leo']
            },

            # Fall: Weakest position for a planet
            'fall': {
                'Sun': 'Libra',
                'Moon': 'Scorpio',
                'Mercury': 'Pisces',
                'Venus': 'Virgo',
                'Mars': 'Cancer',
                'Jupiter': 'Capricorn',
                'Saturn': 'Aries'
            }
        }

        self.planets.update({
            # Add to existing planets dictionary
            'North Node': swe.MEAN_NODE,  # Mean Lunar Node (North)
            'Chiron': swe.CHIRON
            # Note: Midheaven and Part of Fortune are calculated differently
        })

    @staticmethod
    def convert_to_utc(local_time, timezone='Europe/Berlin'):
        """
        Convert local time to UTC, handling daylight saving time automatically.

        :param local_time: Local datetime object
        :param timezone: Timezone string
        :return: UTC datetime
        """
        local_time_with_tz = local_time.replace(tzinfo=ZoneInfo(timezone))
        return local_time_with_tz.astimezone(datetime.timezone.utc)

    def _calculate_julian_day(self, date_time):
        """
        Calculate Julian Day for a given datetime.

        :param date_time: UTC datetime
        :return: Julian Day
        """
        return swe.julday(
            date_time.year,
            date_time.month,
            date_time.day,
            date_time.hour + date_time.minute / 60.0
        )

    def _calculate_house(self, longitude, house_cusps):
        """
        Determine the house for a given celestial longitude.

        :param longitude: Celestial longitude
        :param house_cusps: House cusp longitudes
        :return: House representation
        """
        house_names = [
            '  1 |   |   |     ', '   2|   |   |     ',
            '    |3  |   |     ', '    | 4 |   |     ',
            '    |  5|   |     ', '    |   |6  |     ',
            '    |   | 7 |     ', '    |   |  8|     ',
            '    |   |   |9    ', '    |   |   | 10  ',
            '    |   |   |   11', '12  |   |   |     '
        ]

        for i in range(12):
            if i < 11 and house_cusps[i] <= longitude < house_cusps[i+1]:
                return house_names[i]
            elif i == 11 and (longitude >= house_cusps[11] or longitude < house_cusps[0]):
                return house_names[11]

        return 'Undefined'

    def _evaluate_planetary_dignity(self, planet_name, planet_sign):
        """
        Evaluate the dignity of a planet in its current sign.

        :param planet_name: Name of the planet
        :param planet_sign: Sign the planet is currently in
        :return: Dictionary of dignity information
        """
        dignity_status = {
            'is_ruled': False,
            'is_exalted': False,
            'is_in_detriment': False,
            'is_in_fall': False,
            'dignity_interpretation': ''
        }

        # Check Rulership
        rulership = self.planetary_dignities['rulership']
        if planet_sign in (rulership.get(planet_name, [])):
            dignity_status['is_ruled'] = True
            dignity_status['dignity_interpretation'] += 'In home sign. Strong, natural expression. '

        # Check Exaltation
        exaltation = self.planetary_dignities['exaltation']
        if planet_sign == exaltation.get(planet_name):
            dignity_status['is_exalted'] = True
            dignity_status['dignity_interpretation'] += 'In exaltation. Powerful, elevated expression. '

        # Check Detriment
        detriment = self.planetary_dignities['detriment']
        if planet_sign in (detriment.get(planet_name, [])):
            dignity_status['is_in_detriment'] = True
            dignity_status['dignity_interpretation'] += 'In detriment. Challenges in expressing energy. '

        # Check Fall
        fall = self.planetary_dignities['fall']
        if planet_sign == fall.get(planet_name):
            dignity_status['is_in_fall'] = True
            dignity_status['dignity_interpretation'] += 'In fall. Weakest expression of planetary energy. '

        # If no special dignity noted
        if not any([dignity_status['is_ruled'], dignity_status['is_exalted'],
                    dignity_status['is_in_detriment'], dignity_status['is_in_fall']]):
            dignity_status['dignity_interpretation'] = 'Neutral placement.'

        return dignity_status

    def calculate_natal_chart(self, birth_date, birth_time, latitude, longitude):
        """
        Generate a comprehensive natal chart.

        :param birth_date: Birth date
        :param birth_time: Birth time as float (e.g., 14.5 for 2:30 PM)
        :param latitude: Birth location latitude
        :param longitude: Birth location longitude
        :return: Dictionary of planetary positions
        """
        # Convert time to UTC
        hours, minutes = int(birth_time), int((birth_time % 1) * 60)
        local_datetime = datetime.datetime.combine(birth_date, datetime.time(hours, minutes))
        birth_date_utc = self.convert_to_utc(local_datetime, self.timezone)

        # Set sidereal mode
        swe.set_sid_mode(self.SIDEREAL_MODE, 0, 0)
        jul_day = self._calculate_julian_day(birth_date_utc)
        ayanamsa = swe.get_ayanamsa_ut(jul_day)

        # Set geographic location
        swe.set_topo(longitude, latitude, 0)
        ascmc_data = swe.houses(jul_day, latitude, longitude, self.HOUSE_SYSTEM)
        house_cusps = ascmc_data[0]

        # Comprehensive natal chart calculation
        natal_chart = {}
        for name, planet_id in self.planets.items():
            planet_data = swe.calc_ut(jul_day, planet_id, swe.FLG_SIDEREAL)
            longitude, _ = planet_data[0][:2]

            sign = int(longitude / 30)
            degrees, minutes = int(longitude % 30), int((longitude % 1) * 60)
            house = self._calculate_house(longitude + ayanamsa, house_cusps)

            # Create planet details dictionary
            planet_details = {
                'longitude': longitude,
                'sign': self.sign_names[sign],
                'degree': degrees,
                'minutes': minutes,
                'house': house
            }

            # Add dignity evaluation
            planet_details['dignity'] = self._evaluate_planetary_dignity(name, planet_details['sign'])

            # Store in natal chart
            natal_chart[name] = planet_details

        # Calculate Ascendant
        ascendant_longitude = house_cusps[0] - ayanamsa
        ascendant_sign = int(ascendant_longitude / 30)
        natal_chart['Ascendant'] = {
            'longitude': ascendant_longitude,
            'sign': self.sign_names[ascendant_sign],
            'degree': int(ascendant_longitude % 30),
            'minutes': int((ascendant_longitude % 1) * 60)
        }
        #print(f"{natal_chart}")

        # Print natal chart in a table format
        self._print_natal_chart(natal_chart)

        return natal_chart

    def _print_natal_chart(self, natal_chart):
        """
        Print the natal chart in a formatted table.

        :param natal_chart: Dictionary of planetary positions
        """
        print("Planetary Positions and Dignities:")
        print("-" * 100)
        print(f"{'Planet':10} | {'Sign':12} | {'House':16} | {'Deg. Min.':10} | Dignity Status")
        print("-" * 100)
        for planet, details in natal_chart.items():
            # Handle Ascendant separately
            if planet == 'Ascendant':
                print(f"Ascendant:   | {details['sign']:12} |{' ':18}| {details['degree']:3}°{details['minutes']:3}' | N/A")
            else:
                # Get dignity information if it exists
                dignity_info = details.get('dignity', {'dignity_interpretation': 'Not calculated'})
                dignity_text = dignity_info['dignity_interpretation']
                print(f"{planet:10} | {details['sign']:12} | {details['house']:16} | {details['degree']:3}°{details['minutes']:3}' | {dignity_text}")
        print("-" * 100)

    def calculate_transits(self, natal_chart, current_time=None):
        """
        Calculate planetary transits relative to natal chart.

        :param natal_chart: Original natal chart
        :param current_time: Time for transit calculation
        :return: Transit details
        """
        current_time = current_time or datetime.datetime.now()
        current_time_utc = self.convert_to_utc(current_time, self.timezone)

        swe.set_sid_mode(self.SIDEREAL_MODE, 0, 0)
        jul_day = self._calculate_julian_day(current_time_utc)
        ayanamsa = swe.get_ayanamsa_ut(jul_day)

        transit_details = {}
        for planet_name, planet_id in self.planets.items():
            # Current planet position
            planet_data = swe.calc_ut(jul_day, planet_id, swe.FLG_SIDEREAL)
            current_longitude = planet_data[0][0]

            # Natal planet position
            natal_longitude = natal_chart[planet_name]['longitude']

            # Longitude difference and aspects
            longitude_diff = (current_longitude - natal_longitude + 360) % 360
            aspect = self._calculate_aspect(longitude_diff)

            current_sign = int(current_longitude / 30)
            transit_details[planet_name] = {
                'current_longitude': current_longitude,
                'current_sign': self.sign_names[current_sign],
                'natal_longitude': natal_longitude,
                'longitude_difference': longitude_diff,
                'aspect': aspect  # Now a dictionary with more details
            }

        # Update print method to show new aspect details
        self._print_transit_details(transit_details, current_time_utc)

        return transit_details

    def _print_transit_details(self, transit_details, current_time):
        """
        Print transit details in a more comprehensive format.
        """
        print(f"\nTransit analysis for: {current_time.strftime('%Y-%m-%d %H:%M:%S %Z')}")
        print("-" * 80)
        print(f"{'Planet':10} | {'Current sign':12} | {'Aspect':15} | {'Aspect Type':15} | Interpretation")
        print("-" * 80)
        for planet, details in transit_details.items():
            aspect = details['aspect']
            print(f"{planet:10} | {details['current_sign']:12} | {aspect['name']:15} | {aspect['type']:15} | {aspect['interpretation']}")
        print("-" * 80)

    def _calculate_aspect(self, difference, orb=5):
        """
        Enhanced aspect calculation with more detailed interpretation.

        :param difference: Longitude difference between planets
        :param orb: Acceptable orb for aspect calculation
        :return: Dictionary with aspect details
        """
        aspects = {
            0: {
                'name': 'Conjunction',
                'type': 'Dynamic',
                'orb': 10,  # Wider orb for conjunction
                'interpretation': 'Intense merging of planetary energies'
            },
            180: {
                'name': 'Opposition',
                'type': 'Challenging',
                'orb': 8,
                'interpretation': 'Tension and potential for balance through awareness'
            },
            90: {
                'name': 'Square',
                'type': 'Challenging',
                'orb': 7,
                'interpretation': 'Friction creating dynamic growth and motivation'
            },
            120: {
                'name': 'Trine',
                'type': 'Harmonious',
                'orb': 6,
                'interpretation': 'Natural flow and supportive energy'
            },
            60: {
                'name': 'Sextile',
                'type': 'Supportive',
                'orb': 5,
                'interpretation': 'Opportunities and potential for easy collaboration'
            }
        }

        for angle, aspect_details in aspects.items():
            if abs(difference - angle) < aspect_details['orb']:
                # Calculate exact degree of aspect
                exact_degree = abs(difference - angle)

                return {
                    'name': aspect_details['name'],
                    'type': aspect_details['type'],
                    'exact_degree': exact_degree,
                    'interpretation': aspect_details['interpretation']
                }

        return {
            'name': '',
            'type': 'Neutral',
            'exact_degree': difference,
            'interpretation': ''
        }

def main():
    """Example usage demonstration."""
    calculator = AstrologicalCalculator()

    # Sample birth details
    birth_date = datetime.date(1984, 5, 14)
    birth_time = 5.43
    birth_latitude = 53.0333333
    birth_longitude = 9.0166667

    # Generate natal chart
    natal_chart = calculator.calculate_natal_chart(
        birth_date, birth_time, birth_latitude, birth_longitude
    )

    # Calculate current transits
    current_transits = calculator.calculate_transits(
        natal_chart,
        datetime.datetime.strptime('2024-12-18 18:40:00', "%Y-%m-%d %H:%M:%S")
    )

if __name__ == "__main__":
    main()
