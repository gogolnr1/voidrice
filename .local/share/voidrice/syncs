#!/bin/bash
# Todo:
# .local/share/voidrice gitify
# yandex-disk & dropbox

readonly HOME_DIR="/home/$USER"
readonly MUSIC_DIR="/run/mount/41G-PART/Musik"

readonly BACKUP_STICK1="/run/mount/usb/32G-SANDISK"
readonly BACKUP_STICK2="/run/mount/usb/16G-VERBATIM"

#readonly BACKUP_DATA1="/run/mount/41G-PART" #50GB-PART
readonly BACKUP_DATA2="/run/mount/usb/800G-GRAUGEAR" #1TB-GRAYGEAR

readonly BACKUP_MTP1="$HOME_DIR/.local/run/mount/nova-air"
readonly GPG_NAMES=( 'AEA64026B34D3924C225ED6E259B91BF34A53F38' )

# check options
while test $# -gt 0
do
    case "$1" in
        restore) restore=1
            ;;
        hot) hot=1 ;;
        -d|--documents) docs=1 ;;
        -b|--books)     books=1 ;;
        -m|--music)     music=1 ;;
        -v|--videos)    videos=1 ;;
        -h|--home)      home=1 ;;
        -n|--nova)      nova=1 ;;
        -g|--gpg)       gpg=1 ;;
        *) echo "argument $1" ;;
    esac
    shift
done

[[ -v home ]] ||\
[[ -v docs ]] ||\
[[ -v books ]] ||\
[[ -v music ]] ||\
[[ -v videos ]] ||\
[[ -v nova ]] ||\
[[ -v gpg ]] ||\
[[ -v books ]] ||\
[[ -v documents ]] ||\
	all=1

# -a = --archive
# -P = --partial --progress
# --delete deletes on destination side
# --delete-excluded deletes "non-empty" folders on destination side
# --copy-links includes rules that lead to symbolicaly linked locations
# --ignore-existing ignores existing files on destination side
#rsync_arguments_home="-aP --delete --delete-excluded --copy-links"
rsync_arguments_home="-aP --delete \
	--backup --backup-dir=.DELETED_FILES_$(date "+%Y_%m_%d-%H_%M_%S") \
	--copy-links"
rsync_arguments_media="-aP --copy-links"
rsync_arguments_restore="-aP --ignore-existing --exclude '.local/bin/'"

_rsync () {
  rsync --dry-run "$@"
  rsync --dry-run "$@"|grep denied
  [[ -v hot ]] && rsync "$@" || echo "$@"
}

_gpg_keys() {
  [[ -d ${BACKUP_STICK2} ]] || return 1

  if [[ $1 = --backup ]]; then
    mkdir -p ${BACKUP_STICK2}/gnupg
    
    [[ -v hot ]] &&
      gpg --export-ownertrust > ${BACKUP_STICK2}/gnupg/trustdb-backup.txt
          echo "Ownertrust exported."

    for name in $GPG_NAMES; do
      if [[ -v hot ]]; then
        gpg --export-secret-keys --armor ${name} > ${BACKUP_STICK2}/gnupg/${name}-backup.asc &&
          echo "$name key exported."
      else
        gpg --list-secret-keys ${name}
      fi
    done
  fi
  if [[ $1 = --restore ]]; then
    for name in $GPG_NAMES; do
      gpg --import ${BACKUP_STICK2}/gnupg/${name}-backup.asc &&
        echo "$name key imported."
    done

    gpg --import-ownertrust < ${BACKUP_STICK2}/gnupg/trustdb-backup.txt &&
      echo "Ownertrust imported."
  fi
}

backup_gpg_keys() { _gpg_keys --backup; }
restore_gpg_keys() { _gpg_keys --restore; }

### backup home ###
backup_home () {
  printf "\nhome:\n"

  local home_filter="${HOME_DIR}/.local/share/voidrice/sync_resources/home_filter.txt"
  local home_excludes="${HOME_DIR}/.local/share/voidrice/sync_resources/home_excludes.txt"

  [ -d "$BACKUP_STICK1" ] && bs="$BACKUP_STICK1" || bs="$BACKUP_DATA2/BACKUP_STICK"
  if [ -d "$bs" ]; then
    _rsync ${rsync_arguments_home} --filter="merge ${home_filter}" $HOME_DIR/ ${bs}/B
	#--exclude="${HOME_EXCLUDES}" \

    if [ -d "$HOME_DIR/../rstudio" ]; then
      _rsync ${rsync_arguments_home} $HOME_DIR/../rstudio/ ${bs}/B/home_rstudio
    fi

    if [ -d "${HOME_DIR}/ydisk" ]; then
      _rsync ${rsync_arguments_home} ${HOME_DIR}/ydisk/ ${bs}/ydisk
    fi
  fi
}

### stick-to-stick backup ###
stick_to_stick () {
  printf "\nsticks:\n"
  local excludes="${HOME_DIR}/.local/share/voidrice/sync_resources/excludes_stick.txt"

  if [ -d "$BACKUP_STICK1" ] && [ -d "$BACKUP_STICK2" ]; then
    _rsync ${rsync_arguments_home} --exclude-from="${excludes}" $BACKUP_STICK1 $BACKUP_STICK2
  fi

  if [ -d "$BACKUP_STICK1" ] && [ -d "$BACKUP_DATA2" ]; then
    _rsync ${rsync_arguments_home} --exclude-from="${excludes}" $BACKUP_STICK1/ $BACKUP_DATA2/BACKUP_STICK
  fi
}

backup_music () {
  printf "\nmusic:\n"
  if [ -d "$HOME_DIR/Music" ] && [ -d "$BACKUP_DATA2" ]; then
    _rsync ${rsync_arguments_media} ${MUSIC_DIR} ${BACKUP_DATA2}/
  fi
}

backup_documents () {
  printf "\ndocuments:\n"
  if [ -d "$HOME_DIR/Documents" ]; then
    if [ -d "$BACKUP_STICK1" ]; then
      _rsync ${rsync_arguments_home} ${HOME_DIR}/Documents/ ${BACKUP_STICK1}/D
      _rsync ${rsync_arguments_home} ${HOME_DIR}/Pictures/ ${BACKUP_STICK1}/P
    elif [ -d "$BACKUP_DATA2" ]; then
      _rsync ${rsync_arguments_home} ${HOME_DIR}/Documents/ ${BACKUP_DATA2}/BACKUP_STICK/D
      _rsync ${rsync_arguments_home} ${HOME_DIR}/Pictures/ ${BACKUP_DATA2}/BACKUP_STICK/P
    fi
  fi
}

backup_movies () {
  printf "\nmovies:\n"
  local videos_filter="${HOME_DIR}/.local/share/voidrice/sync_resources/videos_filter.txt"
  if [ -d "$HOME_DIR/Videos" ]; then
    [ -d "$BACKUP_DATA2" ] && local backupdir=${BACKUP_DATA2}
      #_rsync ${rsync_arguments_media} --filter="merge ${videos_filter}" ${HOME_DIR}/Videos/ ${BACKUP_DATA2}/Videos
    [ -d "$BACKUP_DATA1" ] && local backupdir=${BACKUP_DATA1}
      #_rsync ${rsync_arguments_media} --filter="merge ${videos_filter}" ${HOME_DIR}/Videos/ ${BACKUP_DATA1}/Videos

    if [ -n $backupdir ]; then
      _rsync ${rsync_arguments_media} --filter="merge ${videos_filter}" ${HOME_DIR}/Videos/ ${backupdir}/Videos

      read -p 'Clear Movies? ' clearm
      if [[ $clearm == "y" ]]; then
        _rsync ${rsync_arguments_media} --delete --filter="merge ${videos_filter}" ${HOME_DIR}/Videos/Movies ${backupdir}/Videos/Movies
      fi
    fi
  fi
}

backup_books () {
  printf "\nbooks:\n"
  local book_dirname="Calibre Library"
  if [ -d "$HOME_DIR/$book_dirname" ]; then
    if [ -d "$BACKUP_DATA1" ]; then
      _rsync ${rsync_arguments_media} "$HOME_DIR/$book_dirname" "$BACKUP_DATA1/"
    fi
    if [ -d "$BACKUP_DATA2" ]; then
      _rsync ${rsync_arguments_media} "$HOME_DIR/$book_dirname" "$BACKUP_DATA2/"
    fi
  fi
}

restore_home () {
  printf "\nrestore:\n"

  if [ -d ".config/BraveSoftware/Brave-Browser" ]; then echo ".mozilla exists, skip..."; else
	  if [ -d "$BACKUP_DISK2/Volatile/.config" ]; then
		cp -r "$BACKUP_DISK2/Volatile/.mozilla" $HOME_DIR
	  fi
  fi
  if [ -d ".mozilla" ]; then echo ".mozilla exists, skip..."; else
	  if [ -d "$BACKUP_DISK2/Volatile/.mozilla" ]; then
		cp -r "$BACKUP_DISK2/Volatile/.mozilla" $HOME_DIR
	  fi
  fi
  #if [ -d "$BACKUP_STICK1" ]; then
  #  _rsync ${rsync_arguments_restore} ${BACKUP_STICK1}/B $HOME_DIR
  #fi
  # create symbolic links for .local/bin
  #post_restore_script
}

backup_nova () {
  printf "\nnova:\n"
  if [ ! -d "$BACKUP_MTP1/Internal shared storage" ]; then
    printf "\nmounting MTP...\n"
    jmtpfs $BACKUP_MTP1
  fi
  if [ -d "$BACKUP_MTP1/Internal shared storage" ]; then
    if [ -d "$HOME_DIR/Documents/nova" ]; then
      _rsync ${rsync_arguments_media} "$BACKUP_MTP1/Internal shared storage/Pictures" ${HOME_DIR}/Documents/nova
      _rsync ${rsync_arguments_media} "$BACKUP_MTP1/Internal shared storage/Screenshots" ${HOME_DIR}/Documents/nova
      _rsync ${rsync_arguments_media} "$BACKUP_MTP1/Internal shared storage/Movies" ${HOME_DIR}/Documents/nova
      _rsync ${rsync_arguments_media} "$BACKUP_MTP1/Internal shared storage/note" ${HOME_DIR}/Documents/nova
    fi
  fi
  umount $BACKUP_MTP1
}

if [ -v restore ]; then
	[[ -n $gpg ]]  && restore_gpg_keys
	[[ -n $home ]] && restore_home
else
	[[ -n $all ]] || [[ -n $home ]]   && backup_home
	[[ -n $all ]] || [[ -n $docs ]]   && backup_documents
	[[ -n $all ]] || [[ -n $stick ]]  && stick_to_stick
	[[ -n $all ]] || [[ -n $gpg ]]    && backup_gpg_keys
	[[ -n $all ]] || [[ -n $videos ]] && backup_movies
	[[ -n $all ]] || [[ -n $music ]]  && backup_music
	[[ -n $all ]] || [[ -n $books ]]  && backup_books
	[[ -n $all ]] || [[ -n $nova ]]   && backup_nova

fi
