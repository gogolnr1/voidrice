#!/bin/bash
# Todo:
# .local/share/voidrice gitify
# yandex-disk & dropbox

# check for backup devices to use
readonly BACKUP_LARGE="800G-GRAUGEAR 500G-VERBATIM"
for device in $BACKUP_LARGE; do
	[[ -d /run/mount/usb/$device ]] && [[ $(df -h | grep "/run/mount/usb/$device") ]] &&
		BACKUP_DATA="/run/mount/usb/$device" && continue
done

readonly HOME_DIR="/home/$USER"
readonly MUSIC_DIR="/run/mount/41G-PART/Musik"

readonly BACKUP_STICK1="/run/mount/usb/32G-SANDISK"
readonly BACKUP_STICK2="/run/mount/usb/16G-VERBATIM"

readonly BACKUP_MTP1="$HOME_DIR/.local/run/mount/nova-air"
readonly GPG_NAMES=( 'AEA64026B34D3924C225ED6E259B91BF34A53F38' )

# try to intelligently set action to be performed
if [[ $# -eq 0 ]]; then
  currentdir="${PWD#"$HOME"/}"
  parentdir="${currentdir%%/*}"

  case "$parentdir" in
    Projects) projects=1 ;;
    *) exit 0 ;;
  esac

  printf "Found specific sync folder \"$currentdir\".\n\n"
fi

# check options
while test $# -gt 0
do
    case "$1" in
        restore) restore=1 ;;
        dry) dry=1 ;;
        wet) wet=1 ;;
        -d|--documents) docs=1 ;;
        -b|--books)     books=1 ;;
        -m|--music)     music=1 ;;
        -v|--videos)    videos=1 ;;
        -p|--projects)  projects=1 ;;
        -h|--home)      home=1 ;;
        -n|--nova)      nova=1 ;;
        -g|--gpg)       gpg=1 ;;
        *) echo "argument $1" ;;
    esac
    shift
done

if [[ ! -v dry ]] && [[ ! -v wet ]]; then
  PS3="Select action: "

  select action in dry-run wet-swim quit; do
    case $action in
      dry-run)
        dry=1 && break
        ;;
      wet-swim)
        wet=1 && break
        ;;
      quit)
        exit 0
        ;;
      *)
        echo "Invalid option $REPLY"
        ;;
    esac
  done
fi

# if none of the variables is set then sync all
[[ -v home ]] ||\
[[ -v docs ]] ||\
[[ -v books ]] ||\
[[ -v music ]] ||\
[[ -v videos ]] ||\
[[ -v projects ]] ||\
[[ -v nova ]] ||\
[[ -v gpg ]] ||\
[[ -v books ]] ||\
[[ -v documents ]] ||\
	all=1

# -a = --archive
# -P = --partial --progress
# -b = backup files that exist in both folders
# -u = skip files which are newer in dest than in src
# --delete deletes on destination side
# --delete-excluded deletes "non-empty" folders on destination side
# --copy-links includes rules that lead to symbolicaly linked locations
# --ignore-existing ignores existing files on destination side
#rsync_arguments_home="-aP --delete --delete-excluded --copy-links"
rsync_arguments_home="-aP --delete \
	--backup --backup-dir=.DELETED_FILES_$(date "+%Y_%m_%d-%H_%M_%S") \
	--copy-links"
rsync_arguments_media="-aP --copy-links"
rsync_arguments_projects="-abuP --copy-links"
rsync_arguments_restore="-aP --ignore-existing --exclude '.local/bin/'"

_rsync () {
  rsync --dry-run "$@"
  rsync --dry-run "$@"|grep denied
  [[ -v wet ]] && rsync "$@" || echo "$@"
}

_gpg_keys() {
  [[ -d ${BACKUP_STICK2} ]] || return 1

  if [[ $1 = --backup ]]; then
    mkdir -p ${BACKUP_STICK2}/gnupg

    [[ -v wet ]] &&
      gpg --export-ownertrust > ${BACKUP_STICK2}/gnupg/trustdb-backup.txt
          echo "Ownertrust exported."

    for name in $GPG_NAMES; do
      if [[ -v wet ]]; then
        gpg --export-secret-keys --armor ${name} > ${BACKUP_STICK2}/gnupg/${name}-backup.asc &&
          echo "$name key exported."
      else
        gpg --list-secret-keys ${name}
      fi
    done
  fi
  if [[ $1 = --restore ]]; then
    for name in $GPG_NAMES; do
      gpg --import ${BACKUP_STICK2}/gnupg/${name}-backup.asc &&
        echo "$name key imported."
    done

    gpg --import-ownertrust < ${BACKUP_STICK2}/gnupg/trustdb-backup.txt &&
      echo "Ownertrust imported."
  fi
}

backup_gpg_keys() { _gpg_keys --backup; }
restore_gpg_keys() { _gpg_keys --restore; }

### backup home ###
backup_home () {
  printf "\nhome:\n"

  local home_filter="${HOME_DIR}/.local/share/voidrice/sync_resources/home_filter.txt"
  local home_excludes="${HOME_DIR}/.local/share/voidrice/sync_resources/home_excludes.txt"

  [ -d "$BACKUP_STICK1" ] && bs="$BACKUP_STICK1" || bs="$BACKUP_DATA/BACKUP_STICK"
  [ ! -d "$BACKUP_STICK1" ] && mkdir "$BACKUP_DATA/BACKUP_STICK"
  if [ -d "$bs" ]; then
    _rsync ${rsync_arguments_home} --filter="merge ${home_filter}" $HOME_DIR/ ${bs}/B

    if [ -d "$HOME_DIR/../rstudio" ]; then
      _rsync ${rsync_arguments_home} $HOME_DIR/../rstudio/ ${bs}/B/home_rstudio
    fi

    if [ -d "${HOME_DIR}/ydisk" ]; then
      _rsync ${rsync_arguments_home} ${HOME_DIR}/ydisk/ ${bs}/ydisk
    fi
  fi
}

### stick-to-stick backup ###
stick_to_stick () {
  printf "\nsticks:\n"
  local excludes="${HOME_DIR}/.local/share/voidrice/sync_resources/excludes_stick.txt"

  if [ -d "$BACKUP_STICK1" ] && [ -d "$BACKUP_STICK2" ]; then
    _rsync ${rsync_arguments_home} --exclude-from="${excludes}" $BACKUP_STICK1 $BACKUP_STICK2
  fi

  if [ -d "$BACKUP_STICK1" ] && [ -d "$BACKUP_DATA" ]; then
    _rsync ${rsync_arguments_home} --exclude-from="${excludes}" $BACKUP_STICK1/ $BACKUP_DATA/BACKUP_STICK
  fi
}

backup_music () {
  printf "\nmusic:\n"
  if [ -d "$HOME_DIR/Music" ] && [ -d "$BACKUP_DATA" ]; then
    [ ! -d "$BACKUP_DATA/Music" ] && mkdir "$BACKUP_DATA/Music"
    _rsync ${rsync_arguments_media} ${HOME_DIR}/Music/ ${BACKUP_DATA}/Music
  fi
}

backup_documents () {
  printf "\ndocuments:\n"
  if [ -d "$HOME_DIR/Documents" ]; then
    if [ -d "$BACKUP_STICK1" ]; then
      _rsync ${rsync_arguments_home} ${HOME_DIR}/Documents/ ${BACKUP_STICK1}/D
      _rsync ${rsync_arguments_home} ${HOME_DIR}/Pictures/ ${BACKUP_STICK1}/P
    elif [ -d "$BACKUP_DATA" ]; then
      [ ! -d "$BACKUP_DATA/BACKUP_STICK" ] && mkdir "$BACKUP_DATA/BACKUP_STICK"
      _rsync ${rsync_arguments_home} ${HOME_DIR}/Documents/ ${BACKUP_DATA}/BACKUP_STICK/D
      _rsync ${rsync_arguments_home} ${HOME_DIR}/Pictures/ ${BACKUP_DATA}/BACKUP_STICK/P
    fi
  fi
}

backup_movies () {
  printf "\nmovies:\n"
  local videos_filter="${HOME_DIR}/.local/share/voidrice/sync_resources/videos_filter.txt"
  if [ -d "$HOME_DIR/Videos" ]; then
    set -e
    if [ -d $BACKUP_DATA ]; then
      _rsync ${rsync_arguments_media} --filter="merge ${videos_filter}" ${HOME_DIR}/Videos/ ${BACKUP_DATA}/Videos

      read -p 'Clear Movies? ' clearm
      if [[ $clearm == "y" ]]; then
        _rsync ${rsync_arguments_media} --remove-source-files ${HOME_DIR}/Videos/Movies/ ${BACKUP_DATA}/Videos/Movies && \
		find ${BACKUP_DATA}/Videos/Movies/* -type d -empty -delete
      fi
    fi
    set +e
  fi
}

backup_books () {
  printf "\nbooks:\n"
  local dirname="Calibre Library"
  if [ -d "$HOME_DIR/$dirname" ]; then
    if [ -d "$BACKUP_DATA" ]; then
      _rsync ${rsync_arguments_media} "$HOME_DIR/$dirname" "$BACKUP_DATA/dirname"
    fi
  fi
}

restore_home () {
  printf "\nrestore:\n"

  if [ -d ".config/BraveSoftware/Brave-Browser" ]; then echo ".mozilla exists, skip..."; else
	  if [ -d "$BACKUP_DISK2/Volatile/.config" ]; then
		cp -r "$BACKUP_DISK2/Volatile/.mozilla" $HOME_DIR
	  fi
  fi
  if [ -d ".mozilla" ]; then echo ".mozilla exists, skip..."; else
	  if [ -d "$BACKUP_DISK2/Volatile/.mozilla" ]; then
		cp -r "$BACKUP_DISK2/Volatile/.mozilla" $HOME_DIR
	  fi
  fi
  #if [ -d "$BACKUP_STICK1" ]; then
  #  _rsync ${rsync_arguments_restore} ${BACKUP_STICK1}/B $HOME_DIR
  #fi
  # create symbolic links for .local/bin
  #post_restore_script
}

backup_nova () {
  printf "\nnova:\n"
  if [ ! -d "$BACKUP_MTP1/Internal shared storage" ]; then
    printf "\nmounting MTP...\n"
    jmtpfs $BACKUP_MTP1
  fi
  if [ -d "$BACKUP_MTP1/Internal shared storage" ]; then
    if [ -d "$HOME_DIR/Documents/nova" ]; then
      _rsync ${rsync_arguments_media} "$BACKUP_MTP1/Internal shared storage/Pictures" ${HOME_DIR}/Documents/nova
      _rsync ${rsync_arguments_media} "$BACKUP_MTP1/Internal shared storage/Screenshots" ${HOME_DIR}/Documents/nova
      _rsync ${rsync_arguments_media} "$BACKUP_MTP1/Internal shared storage/Movies" ${HOME_DIR}/Documents/nova
      _rsync ${rsync_arguments_media} "$BACKUP_MTP1/Internal shared storage/note" ${HOME_DIR}/Documents/nova
    fi
  fi
  umount $BACKUP_MTP1
}

backup_projects () {
  printf "\nprojects:\n"

  if [ -d "$BACKUP_DATA" ]; then
    [[ -v currentdir ]] && relpath="$currentdir" || relpath='Projects'

    if [ -d "$HOME_DIR/$relpath" ]; then
      # limit file size for specific machine
      [[ $(hostnamectl | grep 'Machine ID:' | awk '{print $NF}') = ff6915e5a88fcbb8152613cb61caf5ba ]] &&
        more_arguments='--max-size=100M'

      _rsync ${rsync_arguments_projects} ${more_arguments} "${BACKUP_DATA}/${relpath}/" "${HOME_DIR}/${relpath}"
      _rsync ${rsync_arguments_projects}                   "${HOME_DIR}/${relpath}/" "${BACKUP_DATA}/${relpath}"
    fi
  fi

}

if [ -v restore ]; then
	[[ -n $gpg ]]  && restore_gpg_keys
	[[ -n $home ]] && restore_home
else
	[[ -n $all ]] || [[ -n $home ]]   && backup_home
	[[ -n $all ]] || [[ -n $docs ]]   && backup_documents
	[[ -n $all ]] || [[ -n $stick ]]  && stick_to_stick
	[[ -n $all ]] || [[ -n $gpg ]]    && backup_gpg_keys
	[[ -n $all ]] || [[ -n $videos ]] && backup_movies
	[[ -n $all ]] || [[ -n $projects ]] && backup_projects
	[[ -n $all ]] || [[ -n $music ]]  && backup_music
	[[ -n $all ]] || [[ -n $books ]]  && backup_books
	[[ -n $all ]] || [[ -n $nova ]]   && backup_nova

fi
